{"text": "### Human: How do I add ui elements to KBase modules?### Assistant: Adding UI Elements\n===========================\n\nControl of narrative interaction is accomplished in files in the\n``ui/narrative/methods/<MyMethod>`` directory.\n\nConfigure the input interface\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe input options are specified in the \"parameters\" section of the\nspec.json file. In the following example, the user will supply two\nrequired parameters: an input name and an output name. If you specify\n'valid\\_ws\\_types', the user will be presented with a searchable\ndropdown of objects that match the specified types. If\n\"is\\_output\\_name\" is set to true, the user will be warned if a name\nwill overwrite an existing object or if the name contains invalid\ncharacters, and a widget displaying that object will appear beneath the\napp cell.\n\n.. code:: json\n\n  {\n        \"parameters\": [ \n            {\n                \"id\": \"read_library_name\",\n                \"optional\": false,\n                \"advanced\": false,\n                \"allow_multiple\": false,\n                \"default_values\": [ \"\" ],\n                \"field_type\": \"text\",\n                \"text_options\": {\n                    \"valid_ws_types\": [\"KBaseAssembly.PairedEndLibrary\",\"KBaseFile.PairedEndLibrary\"]\n                }\n            },\n            {\n                \"id\" : \"output_contigset_name\",\n                \"optional\" : false,\n                \"advanced\" : false,\n                \"allow_multiple\" : false,\n                \"default_values\" : [ \"MegaHit.contigs\" ],\n                \"field_type\" : \"text\",\n                \"text_options\" : {\n                    \"valid_ws_types\" : [ \"KBaseGenomes.ContigSet\" ],\n                    \"is_output_name\":true\n                }\n            }\n        ]\n    }\n\nAnother common input type is a dropdown, which is demonstrated below.\nFor each option, the \"value\" is what will be passed to the app while the\n\"ui\\_name\" is what the user will see. In this example, the parameter is\nhidden by default because \"advanced\" is true (meaning the parameter will\nbe hidden in the \"Advanced options\" section of the input widget).\n\n.. code:: json\n\n    {\n        \"id\": \"prune\",\n        \"optional\": false,\n        \"advanced\": true,\n        \"allow_multiple\": false,\n        \"default_values\": [ \"biochemistry\" ],\n        \"field_type\": \"dropdown\",\n        \"dropdown_options\": {\n            \"options\": [\n                {\n                    \"value\": \"biochemistry\",\n                    \"display\": \"Known biochemistry\",\n                    \"id\": \"biochemistry\",\n                    \"ui_name\": \"Known biochemistry\"\n                },\n                {\n                    \"value\": \"model\",\n                    \"display\": \"Input model\",\n                    \"id\": \"model\",\n                    \"ui_name\": \"Input model\"\n                },\n                {\n                    \"value\": \"none\",\n                    \"display\": \"Do not prune\",\n                    \"id\": \"none\",\n                    \"ui_name\": \"Do not prune\"\n                }\n            ]\n        }\n    }\n\n\nThere are many additional interface options available. One of the best\nways to discover them is to explore |gallery_link| which\ncontains a variety of KBase apps along with the spec file that generated\nthe user interface.\n\n\nConfigure passing variables from Narrative Input to SDK method\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn the 'behavior' section of the spec.json, the output of the user\ninterface is mapped to input to your function. If you have maintained a\nconsistent naming though these mappings can be pretty pro forma.\nHowever, transformations can also be applied to input from the user\ninterface.\n\nIn the example below, the user interface accepts the names of assemblies\nfrom the user and transforms them into object references before passing\nthem on to the method. (This prevents a race condition from occurring if\nmultiple apps are writing to the same object name or if the object is\nrenamed.) In the output mapping, the output (a single object in this\nexample) is unpacked into target properties. These output properties are\nused to visualize the result of the app (thus the need to return\ninformation about the report object).\n\n::\n\n    \"behavior\" : {\n        \"service-mapping\": {\n                \"url\": \"\",\n                \"name\": \"kb_quast\",\n                \"method\": \"run_QUAST_app\",\n                \"input_mapping\": [\n                    {\n                        \"narrative_system_variable\": \"workspace\",\n                        \"target_property\": \"workspace_name\"\n                    },\n                    {\n                        \"input_parameter\": \"assemblies\",\n                        \"target_type_transform\": \"list<ref>\",\n                        \"target_property\": \"assemblies\"\n                    }\n                ],\n                \"output_mapping\": [\n                    {\n                        \"service_method_output_path\": [0,\"report_name\"],\n                        \"target_property\": \"report_name\"\n                    },\n                    {\n                        \"service_method_output_path\": [0,\"report_ref\"],\n                        \"target_property\": \"report_ref\"\n                    },\n                    {\n                        \"constant_value\": \"5\",\n                        \"target_property\": \"report_window_line_height\"\n                    },\n                    {\n                        \"service_method_output_path\": [0],\n                        \"target_property\": \"QUAST_result\"\n                    },\n                    {\n                        \"input_parameter\": \"assemblies\",\n                        \"target_property\": \"input_assemblies\"\n                    },\n                    {\n                        \"narrative_system_variable\": \"workspace\",\n                        \"target_property\": \"workspace_name\"\n                    }\n                ]\n            }\n        }\n\nIn the above example the Narrative take an object looking like this from\nthe App UI:\n\n.. code:: json\n\n    {\n      \"assemblies\": [\n        \"AssemblyA\",\n        \"AssemblyB\"\n      ]\n    }\n\nand passes an object looking like this to the implementation function:\n\n.. code:: json\n\n    {\n      \"assemblies\": [\n        \"765/1/1\",\n        \"765/2/1\"\n      ],\n      \"Workspace_name\": \"<username>:narrative_<long_number>\"\n    }\n\nSimilarly, the Narrative accepts an output object like this:\n\n.. code:: json\n\n    [\n      {\n        \"report_name\": \"QUAST_Report_<uuid>\",\n        \"report_ref\": \"765/3/1\"\n      }\n    ]\n\nAnd presents an object like this one to the report visualization:\n\n.. code:: json\n\n    {\n        \"report_name\": \"QUAST_Report_<uuid>\",\n        \"report_ref\": \"765/3/1\",\n        \"report_window_line_height\": 5,\n        \"QUAST_result\": {\n            \"report_name\": \"QUAST_Report_<uuid>\",\n            \"report_ref\": \"765/3/1\"\n        },\n        \"assemblies\": [\n        \"AssemblyA\",\n        \"AssemblyB\"\n        ],\n        \"Workspace_name\": \"<username>:narrative_<long_number>\"   \n    }\n\nNaming fields in the input widget cell\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``display.yaml`` file primarily contains text to describe the app (shown in the narrative and in the app catalog). Minimally this file should define: \n\n* A module name \n* A module tooltip \n* A ui-name for each parameter \n* A short hint for each parameter\n\nDetails on Narrative UI specification\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFurther details on specification of Narrative app interfaces are\navailable |UIspec_link|\n\n\n.. External links\n\n.. |gallery_link| raw:: html\n\n   <a href=\"https://narrative.kbase.us/narrative/ws.23109.obj.1\" target=\"_blank\">this gallery</a>\n\n.. Internal links\n\n.. |UIspec_link| raw:: html\n\n   <a href=\"../references/UI_spec.html\">here.</a>\n\n"}