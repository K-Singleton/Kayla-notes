{"text": "### Human: How do I add a ui element to a KBase module?### Assistant: Adding UI Elements\n===========================\n\nControl of narrative interaction is accomplished in files in the\n``ui/narrative/methods/<MyMethod>`` directory.\n\nConfigure the input interface\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe input options are specified in the \"parameters\" section of the\nspec.json file. In the following example, the user will supply two\nrequired parameters: an input name and an output name. If you specify\n'valid\\_ws\\_types', the user will be presented with a searchable\ndropdown of objects that match the specified types. If\n\"is\\_output\\_name\" is set to true, the user will be warned if a name\nwill overwrite an existing object or if the name contains invalid\ncharacters, and a widget displaying that object will appear beneath the\napp cell.\n\n.. code:: json\n\n  {\n        \"parameters\": [ \n            {\n                \"id\": \"read_library_name\",\n                \"optional\": false,\n                \"advanced\": false,\n                \"allow_multiple\": false,\n                \"default_values\": [ \"\" ],\n                \"field_type\": \"text\",\n                \"text_options\": {\n                    \"valid_ws_types\": [\"KBaseAssembly.PairedEndLibrary\",\"KBaseFile.PairedEndLibrary\"]\n                }\n            },\n            {\n                \"id\" : \"output_contigset_name\",\n                \"optional\" : false,\n                \"advanced\" : false,\n                \"allow_multiple\" : false,\n                \"default_values\" : [ \"MegaHit.contigs\" ],\n                \"field_type\" : \"text\",\n                \"text_options\" : {\n                    \"valid_ws_types\" : [ \"KBaseGenomes.ContigSet\" ],\n                    \"is_output_name\":true\n                }\n            }\n        ]\n    }\n\nAnother common input type is a dropdown, which is demonstrated below.\nFor each option, the \"value\" is what will be passed to the app while the\n\"ui\\_name\" is what the user will see. In this example, the parameter is\nhidden by default because \"advanced\" is true (meaning the parameter will\nbe hidden in the \"Advanced options\" section of the input widget).\n\n.. code:: json\n\n    {\n        \"id\": \"prune\",\n        \"optional\": false,\n        \"advanced\": true,\n        \"allow_multiple\": false,\n        \"default_values\": [ \"biochemistry\" ],\n        \"field_type\": \"dropdown\",\n        \"dropdown_options\": {\n            \"options\": [\n                {\n                    \"value\": \"biochemistry\",\n                    \"display\": \"Known biochemistry\",\n                    \"id\": \"biochemistry\",\n                    \"ui_name\": \"Known biochemistry\"\n                },\n                {\n                    \"value\": \"model\",\n                    \"display\": \"Input model\",\n                    \"id\": \"model\",\n                    \"ui_name\": \"Input model\"\n                },\n                {\n                    \"value\": \"none\",\n                    \"display\": \"Do not prune\",\n                    \"id\": \"none\",\n                    \"ui_name\": \"Do not prune\"\n                }\n            ]\n        }\n    }\n\n\nThere are many additional interface options available. One of the best\nways to discover them is to explore |gallery_link| which\ncontains a variety of KBase apps along with the spec file that generated\nthe user interface.\n\n\nConfigure passing variables from Narrative Input to SDK method\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn the 'behavior' section of the spec.json, the output of the user\ninterface is mapped to input to your function. If you have maintained a\nconsistent naming though these mappings can be pretty pro forma.\nHowever, transformations can also be applied to input from the user\ninterface.\n\nIn the example below, the user interface accepts the names of assemblies\nfrom the user and transforms them into object references before passing\nthem on to the method. (This prevents a race condition from occurring if\nmultiple apps are writing to the same object name or if the object is\nrenamed.) In the output mapping, the output (a single object in this\nexample) is unpacked into target properties. These output properties are\nused to visualize the result of the app (thus the need to return\ninformation about the report object).\n\n::\n\n    \"behavior\" : {\n        \"service-mapping\": {\n                \"url\": \"\",\n                \"name\": \"kb_quast\",\n                \"method\": \"run_QUAST_app\",\n                \"input_mapping\": [\n                    {\n                        \"narrative_system_variable\": \"workspace\",\n                        \"target_property\": \"workspace_name\"\n                    },\n                    {\n                        \"input_parameter\": \"assemblies\",\n                        \"target_type_transform\": \"list<ref>\",\n                        \"target_property\": \"assemblies\"\n                    }\n                ],\n                \"output_mapping\": [\n                    {\n                        \"service_method_output_path\": [0,\"report_name\"],\n                        \"target_property\": \"report_name\"\n                    },\n                    {\n                        \"service_method_output_path\": [0,\"report_ref\"],\n                        \"target_property\": \"report_ref\"\n                    },\n                    {\n                        \"constant_value\": \"5\",\n                        \"target_property\": \"report_window_line_height\"\n                    },\n                    {\n                        \"service_method_output_path\": [0],\n                        \"target_property\": \"QUAST_result\"\n                    },\n                    {\n                        \"input_parameter\": \"assemblies\",\n                        \"target_property\": \"input_assemblies\"\n                    },\n                    {\n                        \"narrative_system_variable\": \"workspace\",\n                        \"target_property\": \"workspace_name\"\n                    }\n                ]\n            }\n        }\n\nIn the above example the Narrative take an object looking like this from\nthe App UI:\n\n.. code:: json\n\n    {\n      \"assemblies\": [\n        \"AssemblyA\",\n        \"AssemblyB\"\n      ]\n    }\n\nand passes an object looking like this to the implementation function:\n\n.. code:: json\n\n    {\n      \"assemblies\": [\n        \"765/1/1\",\n        \"765/2/1\"\n      ],\n      \"Workspace_name\": \"<username>:narrative_<long_number>\"\n    }\n\nSimilarly, the Narrative accepts an output object like this:\n\n.. code:: json\n\n    [\n      {\n        \"report_name\": \"QUAST_Report_<uuid>\",\n        \"report_ref\": \"765/3/1\"\n      }\n    ]\n\nAnd presents an object like this one to the report visualization:\n\n.. code:: json\n\n    {\n        \"report_name\": \"QUAST_Report_<uuid>\",\n        \"report_ref\": \"765/3/1\",\n        \"report_window_line_height\": 5,\n        \"QUAST_result\": {\n            \"report_name\": \"QUAST_Report_<uuid>\",\n            \"report_ref\": \"765/3/1\"\n        },\n        \"assemblies\": [\n        \"AssemblyA\",\n        \"AssemblyB\"\n        ],\n        \"Workspace_name\": \"<username>:narrative_<long_number>\"   \n    }\n\nNaming fields in the input widget cell\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``display.yaml`` file primarily contains text to describe the app (shown in the narrative and in the app catalog). Minimally this file should define: \n\n* A module name \n* A module tooltip \n* A ui-name for each parameter \n* A short hint for each parameter\n\nDetails on Narrative UI specification\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFurther details on specification of Narrative app interfaces are\navailable |UIspec_link|\n\n\n.. External links\n\n.. |gallery_link| raw:: html\n\n   <a href=\"https://narrative.kbase.us/narrative/ws.23109.obj.1\" target=\"_blank\">this gallery</a>\n\n.. Internal links\n\n.. |UIspec_link| raw:: html\n\n   <a href=\"../references/UI_spec.html\">here.</a>\n\n"}
{"text": "### Human: How do I create a report for a KBase app?### Assistant: .. _creating-reports:\n\nCreating reports\n=======================\n\nThe |KBaseReport_link| \nmodule allows the creation of KBase reports which can present text,\nHTML, and downloadable files to the user as output to your app. The\nKBaseReports module is the preferred way to communicate results to\nusers.\n\n.. topic:: Why do I need to make a report?\n\n    Reports in KBase allow a developer to present visualizations, generate\n    human-readable text strings, show warnings, provide links to output\n    files that do not correspond to typed objects, and in general display\n    information that is useful to a user without having to utilize kbase-ui\n    widgets.\n\n\n.. topic:: What kinds of reports can I make?\n\n    Developers can use the KBaseReports module to display and contain a wide\n    variety of content. It's up to each developer to determine how to\n    creatively and effectively integrate this module with their Apps.\n    Reports can be configured in a variety of ways, depending on how the\n    parameters to parse and display the outputs of an App are configured. We\n    will cover an example and some sample code, but exploring the variety of\n    existing Apps and their output reports within the KBase Narratives will\n    best demonstrate the capabilities of this module. Many developers have\n    used the ability to contain and display HTML files within the reports\n    for visualization of and interaction with data.\n\n\n.. topic:: What do reports look like in KBase?\n\n    Reports are contained in the output cells generated by KBase Apps. A\n    typical and feature-rich example can be found in KBase's implementation\n    of |DESeq2_link|.\n\n\nSections of the report in the screenshot below have been outlined and labeled to show which parts of the report correspond to which parameters:\n\n.. figure:: /images/DESeq2-Annotate.png\n   :alt: DESeq2 Report\n\n\nThe first step in setting up KBase reports for an App is determining what the outputs of the program are in order to figure out how to best display results or give access to files to users. By understanding what kinds of files, HTML reports, warnings, and other outputs are generated by the program outside of KBase, you can develop a strategy for adequately representing all these within the output cell for your App.\n\n.. code-block:: python\n\n    # A working example of an app that generates a report for DESeq2\n    # https://github.com/kbaseapps/kb_deseq/blob/586714d/lib/kb_deseq/Utils/DESeqUtil.py#L241-L285\n\n    report_params = {\n        # message is an optional field.\n        # A string that appears in the summary section of the result page\n        'message': message_in_app,\n\n        # A list of typed objects created during the execution\n        #   of the App. This can only be used to refer to typed\n        #   objects in the workspace and is separate from any files\n        #   generated by the app.\n        # See a working example here:\n        #   https://github.com/kbaseapps/kb_deseq/blob/586714d/lib/kb_deseq/Utils/DESeqUtil.py#L262-L264\n        'objects_created': objects_created_in_app,\n\n        # A list of strings that can be used to alert the user\n        'warnings': warnings_in_app,\n\n        # The workspace name or ID is included in every report\n        'workspace_name': ws_name,\n\n        # A list of paths or Shock IDs pointing to\n        #   a single flat file. They appear in Files section\n        #   as list of downloadable files.\n        # See a working example here:\n        #   https://github.com/kbaseapps/kb_deseq/blob/586714d/lib/kb_deseq/Utils/DESeqUtil.py#L205-L239\n        'file_links': output_files_in_app,\n\n\n        # HTML files that appear in \u201cLinks\u201d\n        #   section. A list of paths or shock node\n        #   IDs pointing to a single flat html file\n        #   or to the top-level directory of a\n        #   website. The report widget can render\n        #   one html view directly. Set one of the\n        #   following fields to decide which view to\n        #   render:\n        #     direct_html - A string with simple\n        #       html text that will be rendered\n        #       within the report widget:\n        #     direct_html_link_index - Integer to\n        #       specify the index of the page in\n        #       html_links to view directly in the\n        #       report widget\n        # See a working example here:\n        # https://github.com/kbaseapps/kb_deseq/blob/586714d/lib/kb_deseq/Utils/DESeqUtil.py#L86-L194\n        'html_links': html_files_in_app,\n        'direct_html_link_index': 0,\n\n        # html_window_height : Window height - This sets the height\n        # of the HTML window displayed under the \u201cReports\u201d section.\n        # The width is fixed.\n        'html_window_height': 333,\n    } # end of report_params\n\n    # Make the client, generate the report\n\n    kbase_report_client = KBaseReport(self.callback_url)\n    output = kbase_report_client.create_extended_report(report_params)\n\n    # Return references which will allow inline display of\n    # the report in the Narrative\n    report_output = {'report_name': output['name'],\n                     'report_ref': output['ref']}\n\n.. External links\n\n.. |KBaseReport_link| raw:: html\n\n   <a href=\"https://appdev.kbase.us/#catalog/modules/KBaseReport\" target=\"_blank\">KBaseReport </a>\n\n.. |DESeq2_link| raw:: html\n\n   <a href=\"https://github.com/kbaseapps/kb_deseq/blob/add70f879a93f060c2b37de914dab7d0c02731c1/lib/kb_deseq/Utils/DESeqUtil.py#L241-L285\" target=\"_blank\">DESeq2 </a>\n"}
{"text": "### Human: How do I create a dynamic service for an SDK module?### Assistant: Dynamic Services\n================\n\nDynamic services vs. SDK Methods (e.g. apps)\n--------------------------------------------\n\nThere are two flavors of SDK Module: dynamic services and apps. Apps run as one-off asynchronous jobs. In contrast to apps, Dynamic Services run as always-on services. Dynamic services cannot call app methods but can call other dynamic services.\n\nDynamic services are typically used as the backend for UI elements (such as Narrative widgets) so those elements can be displayed and updated quickly. The function of a dynamic service is often, for a specific workspace type (such as a KBaseGenome.Genome), to pull the data for an object and process the data into a form that the UI element can understand. The dynamic service will often cache the processed form of the data and return parts of the processed form as the UI needs those parts. This way, the UI doesn\u2019t need to keep the entire dataset in memory.\n\n.. important::\n\n    Remember, dynamic services cannot import other utility modules like DataFileUtil. If your\n    service needs these libraries, it can't be dynamic.\n\nCreating a dynamic service\n--------------------------\n\nBy default, all SDK modules are SDK Methods that run asynchronously. To mark a module as a\ndynamic service, add the following to the kbase.yml file:\n\n.. code-block:: yaml\n\n    service-config:\n        dynamic-service: true\n\nYou can then register your module as usual and start and stop it in a production environment using the |catalog_link| as described below in the :ref:`Manage dynamic services in a KBase environment section <in-kbase>`.\nOther services should be installed with a dynamic service flag like this ``kb-sdk install -d <service>``.\nCalls to other services should be initialized with the Service Wizard URL rather than the SDK Callback URL. The Service Wizard tracks the services that are deployed in the catalog and routes the request to the most up-to-date released service by default. Additionally, authentication token will need to be passed to the called service. This also means the called services should be initialized within each function that uses then rather than once as a class property. With  SDK apps where all of the processing takes place in a common location authentication is handled automatically. With a dynamic service however, the code is not initialized for a particular user and permissions need to be managed explicitly\n\n.. code-block:: python\n\n    # In the class init\n    self.serviceWizardURL = config['srv-wiz-url']\n\n    # *snip*\n\n    # In each method's implementation\n    gaa = GenomeAnnotationAPI(self.serviceWizardURL, token=ctx['token'])\n\n\nStart and stop a dynamic service locally\n----------------------------------------\n1. Run kb-sdk test. This will set up a workdir in test_local like this:\n\n.. code-block:: bash\n\n    $ tree test_local/workdir/\n    test_local/workdir/\n    \u251c\u2500\u2500 config.properties\n    \u251c\u2500\u2500 tmp\n    \u2514\u2500\u2500 token\n\n2. Create a run_container.sh file in test_local by copying run_tests.sh to run_container.sh and\nmaking the following edits to the last line:\n\n* Delete `test` at the end of the file\n* Delete ``-e SDK_CALLBACK_URL=$1``\n* Add ``-d -p <external_port>:5000 --dns 8.8.8.8``\n\nWhen you\u2019re done it should look similar to this (obviously the module name will be different):\n\n.. code-block:: bash\n\n    #!/bin/bash\n    script_dir=\"$(cd \"$(dirname \"$(readlink -f \"$0\")\")\" && pwd)\"\n    cd $script_dir/..\n    $script_dir/run_docker.sh run --user $(id -u) -v\n    $script_dir/workdir:/kb/module/work -d -p 10001:5000 --dns 8.8.8.8\n    test/htmlfilesetserv:latest\n\n3. Run the script:\n\n.. code-block:: bash\n\n    $ ./run_container.sh\n    c8ea1197f9251323746d9ae42363387381ee79f6c06cd826e6dbfba0a7fd703b\n\nYou can now interact with the service at the port you specified (in the example above, 10001).\n\nTo view logs, get the container ID with docker ps and run docker logs:\n\n.. code-block:: bash\n\n    $ docker ps\n    CONTAINER ID\n    CREATED\n    NAMES\n    c8ea1197f925\n    \"./scripts/entrypoint\" 2 minutes ago Up 2 minutes 0.0.0.0:10001->5000/tcp gigantic_swirles\n    $ docker logs c8ea1197f925\n    2016-10-14 22:55:27.835:INFO::Logging to StdErrLog::DEBUG=false via\n    org.eclipse.jetty.util.log.StdErrLog\n    2016-10-14 22:55:27.892:INFO::jetty-7.0.0.v20091005\n    *snip*\n\nWhen you\u2019re done, shut down the docker container:\n\n.. code-block:: bash\n\n    $ docker stop c8ea1197f925\n    c8ea1197f925\n\n.. _in-kbase:\n\nManage dynamic services in a KBase environment\n-------------------------------------------------------\nThe |catalog_link| provides tools to launch, inspect and stop dynamic services in each environment. The top of this page is a list of currently running services. There may be multiple instances of a service running that are based on different git hashes. As described above, the Service Wizard will route requests to the most current version of a released service (falling back to Beta or Dev if the service is not yet released). If this latest version is not running when a request is received, the service wizard will launch a new instance. This behavior improves resilience because if a container crashes, it will be restarted by the next service request. However, it also means that there is no rapid way to revert to an earlier version of the service if a problem is discovered with the service.\n\n.. image:: /images/service-catalog.png\n    :alt: Service Catalog\n\nLogs of STDOUT and STDERR for services are also available to catalog administrators and may prove useful for debugging. \nFinally, catalog admins may also stop running services. There is no default timeout for dynamic services, \nso developers should periodically cull old versions of their services that are still running as they release new versions. \nBelow the active services are lists of Released, Beta and Dev services that developers may launch but the Service Wizard generally renders this unnecessary.\n\n\n.. External links\n.. |catalog_link| raw:: html\n\n   <a href=\"https://appdev.kbase.us/#catalog/services\" target=\"_blank\">catalog interface</a>\n\n\n"}
{"text": "### Human: How do I edit the dockerfile of a KBase app?### Assistant: Editing your app's Dockerfile\n==================================\n\nTo set up custom programs for your app, such as third-party tools, you\ncan edit your Dockerfile, which contains the setup code needed to build\nup your container.\n\nA helpful resource is the |bestPractices_link| guide.\n\nThe first two lines of the Dockerfile look something like:\n\n::\n\n    FROM kbase/sdkbase2:latest\n    MAINTAINER KBase Developer\n\nChange  ``KBase Developer`` to be the email address of the person\nwho will be responsible for the upkeep of the module.\n\nThe base KBase Docker image contains a KBase Ubuntu image with the\ndependencies necessary JSON-RPC server in the supported language, as\nwell as a core set of KBase API Clients. You will need to include any\ndependencies, including the installation of whatever tool you are\nwrapping, to build a custom Docker image that can run your Module.\n\nFor example:\n\n::\n\n    RUN \\\n      git clone https://github.com/voutcn/megahit.git && \\\n      cd megahit && \\\n      git checkout tags/v1.0.3 && \\\n      make\n\nNote: you do not have to add any lines to the Dockerfile for installing\nyour SDK Module code, as this will happen automatically. The contents of\nyour SDK Module git repo will be added at /kb/module.\n\nIt is also important to note that layers in the Docker image are\ngenerated by each command in the Dockerfile. To make a streamlined\nDocker image which will deploy on a worker node more quickly and make\ncycles of a Docker image build faster, it is best to remove any large,\nextraneous files, such as a tarball from which you installed a tool.\n\nTo accomplish this, commands to your Dockerfile should look like this:\n\n::\n\n    RUN \\\n      wget blah.com/tarball.tgz && \\\n      tar xzf tarball.tgz && \\\n      cd tarball && \\\n      make && \\\n      cd .. && \\\n      rm -rf tarball.tgz\n\nWhere each ``&&`` lets you chain together multiple bash commands, and\nthe backslash continues the same, single-line command over multiple\nlines.\n\nAvoid this:\n\n::\n\n    RUN wget blah.com/tarball.tgz\n    RUN tar xzf tarball.tgz\n    RUN cd tarball\n    RUN make\n    RUN cd ..\n    RUN rm -rf tarball.tgz\n\nEach call to ``RUN`` creates a separate Docker image layer that sits on\ntop of the previous one. Previous layers are read-only, so you can't\nmodify their content if you wanted to clean up files. In general, you\nwill want one ``RUN`` command for each discrete service that you set up\nin your container.\n\nFinal note: Docker will rebuild everything from the first detected\nchange in a dockerfile but pull everything upstream of that from its\ncache. If you are pulling in external data using ``RUN`` and a command\nlike ``git clone`` or ``wget``, then changes in those sources will not\nautomatically be reflected in a rebuilt Docker image unless the Docker\nfile changes at or before that import.\n\n.. External links\n.. |bestPractices_link| raw:: html\n\n   <a href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices\" target=\"_blank\">Dockerfile Best Practices </a>\n\n"}
{"text": "### Human: How do I acess the utilities of a file?### Assistant: Working with the file utils\n===========================\n\nNeed to work with a type of file? There's a built-in utility for that.\nRemember that utils run in separate containers that have a link to\nscratch, so keep your files in scratch and upload them from there.\n\nWhere are the utils?\n~~~~~~~~~~~~~~~~~~~~\n\nSearch for \"Util\" in |CIcatalog_link|.\n\nDataFileUtil, GenomeFileUtil, and AssemblyUtil are very commonly used.\nRead the examples below for a quick idea on how to use them.\n\n.. note::\n\n    Upload local genome files for all of your tests. If you use an\n    existing workspace reference in your tests, it won't work in the\n    AppDev/CI environments.\n\nDataFileUtil\n------------\n\n|DataFileUtil_link| is the\npreferred general utility to fetch and save objects. Use GenomeFileUtil\nor AssemblyUtil if you are specifically working with FASTA or GFF files.\n\n*Initialize DataFileUtil client and get an object by reference.*\n\n.. code-block:: py\n\n    self.callback_url = os.environ['SDK_CALLBACK_URL']\n    self.dfu = DataFileUtil(self.callback_url)\n    genome_ref = \"your/object_reference\"\n    genome_data = dfu.get_objects({'object_refs': [genome_ref]})['data'][0]\n    genome_obj = genome_data['data']\n    genome_meta = genome_data['info'][10]\n\n*Upload a file or directory to shock*\n\n.. code-block:: py\n\n    # Upload a directory and zip it\n    file = self.dfu.file_to_shock({\"file_path\": scratch_path, \"pack\": \"zip\"})\n    file['shock_id']  # has the shock id\n\n    # Upload a single file to shock\n    file = self.dfu.file_to_shock({\"file_path\": scratch_path})[\"shock_id\"]\n    file['shock_id']  # has the shock id\n\n*Save an object to the workspace and get an object reference*\n\n.. code-block:: py\n\n    save_object_params = {\n        'id': workspace_id,\n        'objects': [{\n            'type': 'KBaseRNASeq.RNASeqSampleSet',\n            'data': sample_set_data,\n            'name': sample_set_object_name\n        }]\n    }\n\n    dfu_oi = dfu.save_objects(save_object_params)[0]\n    # Construct the workspace reference: 'workspace_id/object_id/version'\n    object_reference = str(dfu_oi[6]) + '/' + str(dfu_oi[0]) + '/' + str(dfu_oi[4])\n\n*Download an object from shock to a filepath*\n\n.. code-block:: py\n\n    self.dfu.shock_to_file({\n        'shock_id': shock_id,\n        'file_path': scratch_directory,\n        'unpack': 'unpack'\n    })\n\nExamples\n^^^^^^^^\n- |ProkkaUtils_link| \n- |StringTieUtil_link| \n- |kb_trimmomaticImpl_link| \n- |masurca_assembler_link| \n\nGenomeFileUtil\n--------------\n\n*Download:*\n\n.. code-block:: py\n\n    file = gfu.genome_to_gff({'genome_ref': genome_ref})\n    file['path']  # -> '/path/to/your/gff_file'\n\n*Upload:*\n\n.. code-block:: py\n\n    gfu = GenomeFileUtil(os.environ['SDK_CALLBACK_URL'], token=self.getContext()['token'])\n    gfu.genbank_to_genome({\n        'file': {'path': scratch_path},\n        'workspace_name': workspace_name,\n        'genome_name': genome_obj\n    })\n\nExample\n^^^^^^^^\n\n- |masurca_assembler_link| \n- |ProkkaUtils_link| \n\nAssemblyUtil\n------------\n\n*Download:*\n\n.. code-block:: py\n\n    assembly_util = AssemblyUtil(self.callback_url)\n    file = assembly_util.get_assembly_as_fasta({\n        'ref': assembly_workspace_reference\n    })\n    file['path']  # -> 'path/to/your/fasta/file.fna'\n\n*Upload:*\n\n.. code-block:: py\n\n    assembly_util = AssemblyUtil(self.callback_url)\n    return assembly_util.save_assembly_from_fasta({\n        'file': {'path': scratch_file_path},\n        'workspace_name': workspace_name,\n        'assembly_name': 'my_uploaded_assembly'\n    }\n\nExample\n^^^^^^^\n\n- |kb_SPAdesImpl_link| \n- |AssemblyRASTImpl_link| \n- |VelvetImpl_link| \n\nReadsUtils\n----------\n\nExample\n^^^^^^^\n\n- |VelvetImpl_link| \n- |kb_SPAdesImpl_link| \n- |VelvetImpl_link| \n- |masurca_assembler_link| \n\nGenomeSearchUtil\n-----------------\n\nExample\n^^^^^^^\n\n- |diffExpr_link| \n\n\n\n.. External links\n\n.. |CIcatalog_link| raw:: html\n\n   <a href=\"https://ci.kbase.us/#catalog/modules\" target=\"_blank\">the catalog</a>\n\n.. |DataFileUtil_link| raw:: html\n\n   <a href=\"https://github.com/kbaseapps/DataFileUtil\" target=\"_blank\">DataFileUtil </a>\n\n.. |ProkkaUtils_link| raw:: html\n\n   <a href=\"https://github.com/kbaseapps/ProkkaAnnotation/blob/master/lib/ProkkaAnnotation/Util/ProkkaUtils.py\" target=\"_blank\">ProkkaUtils </a>\n\n.. |StringTieUtil_link| raw:: html\n\n   <a href=\"https://github.com/kbaseapps/kb_stringtie/blob/master/lib/kb_stringtie/Utils/StringTieUtil.py\" target=\"_blank\">StringTieUtil </a>\n\n.. |kb_trimmomaticImpl_link| raw:: html\n\n   <a href=\"https://github.com/kbaseapps/kb_trimmomatic/blob/master/lib/kb_trimmomatic/kb_trimmomaticImpl.py\" target=\"_blank\">kb_trimmomaticImpl </a>\n\n.. |masurca_assembler_link| raw:: html\n\n   <a href=\"https://github.com/kbaseapps/kb_MaSuRCA/blob/master/lib/MaSuRCA/core/masurca_assembler.py\" target=\"_blank\">masurca_assembler </a>\n\n.. |kb_SPAdesImpl_link| raw:: html\n\n   <a href=\"https://github.com/kbaseapps/kb_SPAdes/blob/master/lib/kb_SPAdes/kb_SPAdesImpl.py\" target=\"_blank\">kb_SPAdesImpl </a>\n\n.. |AssemblyRASTImpl_link| raw:: html\n\n   <a href=\"https://github.com/kbaseapps/ARAST_SDK/blob/master/lib/AssemblyRAST/AssemblyRASTImpl.py\" target=\"_blank\">AssemblyRASTImpl </a>\n\n.. |VelvetImpl_link| raw:: html\n\n   <a href=\"https://github.com/kbaseapps/kb_Velvet/blob/master/lib/Velvet/VelvetImpl.py\" target=\"_blank\">VelvetImpl </a>\n\n.. |diffExpr_link| raw:: html\n\n   <a href=\"https://github.com/kbaseapps/DifferentialExpressionUtils/blob/master/lib/DifferentialExpressionUtils/core/diffExprMatrix_utils.py\" target=\"_blank\">diffExprMatrix_utils</a>\n\n\n"}
{"text": "### Human: How do I complete the documentation for a KBase app?### Assistant: Fully documenting your app\n================================\n\nComplete Module Info\n~~~~~~~~~~~~~~~~~~~~\n\nIf you haven't done so already, add the email address of the \nmodule's maintainer to the |Dockerlink|\n\nIcons, Publications, Original tool authors, Institutional Affiliations,\nContact Information, and most importantly, Method Documentation must be\nadded to your module before it can be deployed. This information will\nshow up in the |appcatalog_link| \n\nPlease be aware that your module implementation and information must\nconform to our\n|Policies_link| \nbefore it will be accepted for public deployment. Fortunately, most of\nthese are common sense (for example, sufficient content on the App Info\npage for a user to run your app and understand what it's doing, proper\narguments and explanation of their use on the input widget, etc.), but\nplease take the time to familiarize yourself with these requirements\nbefore requesting public deployment.\n\nAdding an Icon\n^^^^^^^^^^^^^^\n\nYou can make a custom icon for each app in your module, or use an\nexisting one that corresponds to the tool that you have wrapped. Feel\nfree to repurpose the icons from existing KBase apps, or make your own.\nYour icon can be PNG, GIF, or JPEG (the KBase ones are PNG) and should\nfit in a square 200x200 pixels. To match our existing icons, use these guidelines:\n\n* 200x200px image with 40px rounded edges\n* Font: Futura Condensed Medium, 72pt, white\n* 72dpi PNG\n\nPDF vector and PNG bitmap versions that we used for our icons are available at\n|appicons_link| in case you would like to use them\nas a starting point.\n\nYour icons should be added to your KBase SDK module GitHub repo in the\n**img** image folder for each app at:\n\n::\n\n    https://github.com/<MyUserName>/<MyModule>/ui/narrative/methods/<MyMethod>/img/\n\n\nThen edit the **display.yaml** file found at:\n\n::\n\n    https://github.com/<MyUserName>/<MyModule>/ui/narrative/methods/<MyMethod>/display.yaml\n\n\nand add an **icon:** configuration (NOTE: just add the name of the image\nfile and do not include the path, so *not* \"img/foo.png\"). For example,\nin the file:\n|trimmomatic_link| \n\nthe **icon:** is configured by the line: icon: trimmomatic-orange.png\n\nNaming and Categorizing\n^^^^^^^^^^^^^^^^^^^^^^^\n\nEach app should have a unique display name. The display name is\nconfigured in the **display.yaml** file at:\n\n::\n\n    https://github.com/<MyUserName>/<MyModule>/ui/narrative/methods/<MyMethod>/display.yaml\n\nand add a **name:** configuration. If you are wrapping an existing tool\nwith a known name, please include that name to make it easier for people\nto find it, such as\n\n.. code:: yaml\n\n    name: Trimmomatic - Read Trimming\n\nYou should tag your app with one (or multiple) \"categories\". (If you\ndon't, it will appear in the \"Uncategorized\" section and users will be\nless likely to find it.)\n\nThe categories are set in the **spec.json** file at:\n\n::\n\n    https://github.com/<MyUserName>/<MyModule>/ui/narrative/methods/<MyMethod>/spec.json\n\nCurrently, the following categories are recognized. The tag before the :\non each line is the internal label for the category, used in the\nspec.json. The phrase after the : is the display name for the category\nthat is used in the App Catalog.\n\n::\n\n    annotation: Genome Annotation\n    assembly: Genome Assembly\n    communities: Microbial Communities\n    comparative_genomics: Comparative Genomics\n    expression: Expression\n    metabolic_modeling: Metabolic Modeling\n    reads: Read Processing\n    sequence: Sequence Analysis\n    util: Utilities\n\n\n(Please contact us via |contactUS_link| if you have\nsuggestions for more... we expect to add more categories and possibly\nsubcategories in the near future.)\n\nAn example of a category configuration line is:\n\n::\n\n    \"categories\": [\"active\",\"assembly\",\"util\"],\n\nPlease leave the category \"active\" at the beginning of the list of\ncategories, as this is a special category that indicates whether your\napp should be shown at all in the App Catalog. The rest of the\ncategories are treated as normal tags.\n\nWriting your App Info page\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInformation for the App Info page is configured in the **display.yaml**\nfile at:\n\n::\n\n    https://github.com/<MyUserName>/<MyModule>/ui/narrative/methods/<MyMethod>/display.yaml\n\nThe fields that should be configured are\n\n-  name\n-  icon\n-  tooltip\n-  description\n-  publications\n-  screenshots\n\nName, Icon, Tooltip, Description\n''''''''''''''''''''''''''''''''\n\n**name:** and **icon:** are explained above. You must also add a\n**tooltip:** as a secondary short description (usually one sentence\nsummarizing the purpose of the app).\n\nThe **description:** field is for a more detailed description, which can\ninclude several recommended pieces of information. For example, the URL\nof an exemplar Narrative that demonstrates how to use the app should be\nincluded in the description. If you are wrapping an existing tool,\nplease add links to the open-source repo for that tool in both the\n**description:** field and the **publications:** field. If there is a\nhome page for the tool, please also add a link to that.\nPublications\nPublications and Links\n''''''''''''''''''''''\n\nIt is important to accurately cite all associated publications and software when preparing an app for KBase deployment. This is especially true when you wrap an existing tool.\n\n* All publication listings belong in the \u2018publications\u2019 field at the bottom of the **display.yaml** file.\n\n* Tool home pages and open source repos should also be included as publications.\n\n* Publications and software information should not be duplicated elsewhere in the file. \n\n* Links to source codes or websites should be prefaced with some information. Do not list the hyperlink by itself (see example below).\n\n* The minimum fields to provide are the **display-text:** and a **link:**. Optionally, you can provide a **pmid:** with a PubMed ID.\n\n* All publication information should be in the PLOS style format (see example below). \n\n.. tip::\n\n   PLOS Format:\n\n   Author Surname Author Initial(s), Author Surname Author Initial(s), et al. Title of Article. Title of Journal. Publication Year;Volume: Page Range. doi:  \n\nThe format for the minimal publication is:\n\n.. code::\n\n    publications : \n        -\n            display-text: |\n                Citation in PLOS style format\n            link: Link associated with publication \n\nAn example:\n\n::\n\n    publications :\n        -\n            pmid: 27071849\n            display-text : |\n                Menzel P, Ng KL, Krogh A. Fast and sensitive taxonomic classification for metagenomics with Kaiju. Nat Commun. 2016;7: 11257. doi:10.1038/ncomms11257\n            link: http://www.ncbi.nlm.nih.gov/pubmed/27071849\n\n        -\n            pmid: 21961884\n            display-text : |\n                Ondov BD, Bergman NH, Phillippy AM. Interactive metagenomic visualization in a Web browser. BMC Bioinformatics. 2011;12: 385. doi:10.1186/1471-2105-12-385\n            link: http://www.ncbi.nlm.nih.gov/pubmed/21961884\n\n        -\n            display-text: |\n                Kaiju Homepage:\n            link: http://kaiju.binf.ku.dk/\n\n        -\n            display-text: |\n                Kaiju DBs from:\n            link: http://kaiju.binf.ku.dk/server\n\n        -\n            display-text: |\n                Github for Kaiju:\n            link: https://github.com/bioinformatics-centre/kaiju\n\n        -\n            display-text: |\n                Krona homepage:\n            link: https://github.com/marbl/Krona/wiki\n\n        -\n            display-text: |\n                Github for Krona:\n            link: https://github.com/marbl/Krona\n\n\nScreenshots\n'''''''''''\n\nYou can add screenshots (or other relevant images) to the \"img/\" folder\nin the same fashion as the icon image. These screenshots should be\nconfigured in the **display.yaml** file as a list with one filename on\neach line, preceded by a hyphen, e.g.,\n\n::\n\n    screenshots:\n        - screenshot_1.png\n        - screenshot_2.png\n\nIf you do not want to have any screenshots, leave the **screenshots:**\nlist blank.\n\n::\n\n    screenshots: []\n\nExample\n'''''''\n\nFor an example of a complete App Info page that would be acceptable for\npublic deployment, please see examples in the Trimmomatic app:\n\n-  |appdevTrim_link| \n-  |psdehalTrim_link| \n\n.. important:: \n\n    Please bear in mind that for public release, your module **MUST** meet\n    all the requirements laid out in the `KBase SDK\n    Policies <../references/dev_guidelines.html>`__.\n    We reserve the right to delay public release of SDK modules until all\n    requirements are met. Please take the time to familiarize yourself with\n    these policies to avoid delay in releasing your module.\n\n.. Internal links\n\n.. |Dockerlink| raw:: html\n\n    <a href=\"edit_your_dockerfile.html\">Dockerfile.</a>\n\n.. External links\n\n.. |appcatalog_link| raw:: html\n\n   <a href=\"https://appdev.kbase.us/#appcatalog/\" target=\"_blank\">App catalog (https://appdev.kbase.us/#appcatalog/)</a>\n\n.. |Policies_link| raw:: html\n\n   <a href=\"../references/dev_guidelines.html\" target=\"_blank\">Policies</a>\n\n.. |appicons_link| raw:: html\n\n   <a href=\"https://github.com/kbase/kb_sdk_docs/tree/master/source/images/app-icons\" target=\"_blank\">https://github.com/kbase/kb_sdk_docs/tree/master/source/images/app-icons</a>\n\n.. |trimmomatic_link| raw:: html\n\n   <a href=\"https://github.com/psdehal/kb_trimmomatic/blob/master/ui/narrative/methods/run_trimmomatic/display.yaml\" target=\"_blank\">https://github.com/psdehal/kb_trimmomatic/blob/master/ui/narrative/methods/run_trimmomatic/display.yaml</a>\n\n.. |contactUS_link| raw:: html\n\n   <a href=\"http://kbase.us/contact-us\" target=\"_blank\">ContactUs (http://kbase.us/contact-us)</a>\n\n.. |appdevTrim_link| raw:: html\n\n   <a href=\"https://appdev.kbase.us/#appcatalog/app/kb_trimmomatic/run_trimmomatic/dev\" target=\"_blank\">https://appdev.kbase.us/#appcatalog/app/kb_trimmomatic/run_trimmomatic/dev</a>\n\n.. |psdehalTrim_link| raw:: html\n\n   <a href=\"https://github.com/psdehal/kb_trimmomatic/blob/master/ui/narrative/methods/run_trimmomatic/display.yaml\" target=\"_blank\">https://github.com/psdehal/kb_trimmomatic/blob/master/ui/narrative/methods/run_trimmomatic/display.yaml</a>\n\n"}
{"text": "### Human: How do I list and view the jobs running on KBase?### Assistant: Listing and viewing jobs\n-----------------------------\n\n.. code-block:: python\n\n    # View the latest jobs\n\n    from biokbase.narrative.jobs.jobmanager import JobManager\n    jm = JobManager()\n    jm.list_jobs()\n\n\nIf you do ``run_app()`` without a ``cell_id`` field, it\u2019ll return the job object. So, you could do something like:\n    \n.. code:: python\n\n    my_job = AppManager().run_app(app_info) \n    my_job.job_id\n\n\n.. todo::\n    \n    Expand with an explanation of what the jobs are, the purpose of viewing jobs, and in what context you would need this.\n"}
{"text": "### Human: How do I manually build the KBase SDK?### Assistant: Manually building the SDK\n==========================\n\n.. warning::\n\n    The recommended installation option is to run the |container_link|.\n\n\nJava JDK 8\n'''''''''''\n\n|oracle_link|\n\nAfter downloading and installing the JDK, set your ``JAVA_HOME``\nenvironment variable to point to your JDK installation. If you're not\nsure where that is, on a Mac, the command ``/usr/libexec/java_home``\nshould tell you and on Linux, ``readlink -f $(which javac)`` will provide\nthe installed location of the javac, which you can use to find the base\ndirectory of the installation. On a Mac you can set the variable like so:\n\n::\n\n    # for bash\n    export JAVA_HOME=`/usr/libexec/java_home`\n    # for tcsh/csh\n    setenv JAVA_HOME `/usr/libexec/java_home`\n\nYou should probably add this command to the end of your\n``~/.bash_profile`` or ``~/.bashrc`` file so it is always set when you start\na terminal.\n\nApache Ant\n''''''''''\n\n|ant_link|\n\n|antapache_link|\n\nThe easiest way to install Ant on a Mac is probably to use a package\nmanager like |brew_link| , which allows you to install\nsimply by ``brew install ant``. Make sure the Ant install location is\nadded to your PATH environment variable, which is generally handled for\nyou if you use a package manager like HomeBrew.\n\nFetch the code from GitHub:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate a directory in which you want to work. All your work should go\nhere. All commands that follow are assuming you are using a UNIX shell.\n\n::\n\n    cd <working_dir>\n    git clone https://github.com/kbase/kb_sdk\n    cd kb_sdk\n    make bin  # or \"make\" to compile from scratch\n\nYou should now have the kb-sdk program built in kb\\_sdk/bin. It will be\nhelpful to add this to your execution path. From within the kb\\_sdk\ndirectory, you can run in Bash:\n\n::\n\n    export PATH=$(pwd)/bin:$PATH\n\nOptionally, you can also install command completion with:\n\n::\n\n    source src/sh/sdk-completion.sh\n\nLike ``JAVA_HOME``, you should consider adding these last two commands\nto your ``~/.bash_profile`` or ``~/.bashrc`` file so the SDK is always\navailable in the terminal with command completion.\n\nTest installation\n^^^^^^^^^^^^^^^^^\n\nTo make sure you have built and installed the SDK successfully, type ``kb-sdk help`` and ``kb-sdk version``. Check that the version matches that declared in the line in ``src/java/us/kbase/mobu/ModuleBuilder.java`` that looks like this:\n\n::\n\n    public static final String VERSION = \"1.x.x\";\n\n\n.. External links\n\n.. |oracle_link| raw:: html\n\n   <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a>\n\n.. |ant_link| raw:: html\n\n   <a href=\"http://ant.apache.org\" target=\"_blank\">http://ant.apache.org</a>\n\n.. |antapache_link| raw:: html\n\n   <a href=\"http://ant.apache.org/manual/install.html\" target=\"_blank\">http://ant.apache.org/manual/install.html</a>\n\n.. |brew_link| raw:: html\n\n   <a href=\"http://brew.sh/\" target=\"_blank\">HomeBrew </a>\n\n.. Internal links\n\n.. |dependencies_link| raw:: html\n\n   <a href=\"../tutorial/dependencies.html\">Install SDK Dependencies - Docker </a>\n\n.. |container_link| raw:: html\n\n   <a href=\"../tutorial/install.html\">SDK as a Docker container</a>\n\n\n"}
{"text": "### Human: How do I run shell commands in the dockerfile of a KBase app?### Assistant: Running shell commands\n==============================\n\nDownload and compile using your Dockerfile\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMany KBase apps wrap third-party tools with commandline interfaces. You\ncan compile these programs for your app by entering the build commands\nin your Dockerfile. For example, |FastANI_link| compiles and installs\nwith this series of commands:\n\n.. code-block:: bash\n\n    # Fetch and compile FastANI\n    RUN git clone https://github.com/ParBLiSS/FastANI.git /opt/FastANI \\\n        && cd /opt/FastANI \\\n        && git checkout tags/v1.0 -b v1.0 \\\n        && ./bootstrap.sh \\\n        && ./configure \\\n        && make\n    # Place FastANI in the PATH for the docker user\n    RUN ln -s $(readlink -f ./fastANI) /usr/local/bin/fastANI\n\nSome things to note:\n\n-  Be sure to check out a specific version tag or commit so that your\n   app doesn't receive unexpected, possibly broken updates\n-  Put this code high up in your Dockerfile, above where your app gets\n   initialized, so that it gets cached and doesn't have to re-run every\n   time you change your app\n-  You can place commands in the directory ``/kb/deployment/bin/``, and\n   it will automatically get added to your container's ``$PATH``\n\n.. note::\n    Also see: |editApp_link| \n\nInvoking the command in Python\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can use the  |subprocess_link| package to invoke commands from within python.\n\nThe following example from the |kb_quast_link| repository\ndemonstrates how to do (and document) this well with Python.\n\n.. code:: python\n\n    def run_quast_exec(self, outdir, filepaths, labels, skip_glimmer=False):\n        threads = psutil.cpu_count() * self.THREADS_PER_CORE\n        # DO NOT use genemark instead of glimmer, not open source\n        # DO NOT use metaQUAST, uses SILVA DB which is not open source\n        cmd = ['quast.py', '--threads', str(threads), '-o', outdir, '--labels', ','.join(labels),\n               '--glimmer', '--contig-thresholds', '0,1000,10000,100000,1000000'] + filepaths\n\n        if skip_glimmer:\n            self.log('skipping glimmer due to large input file(s)')\n            cmd.remove('--glimmer')\n\n        self.log('running QUAST with command line ' + str(cmd))\n        retcode = _subprocess.call(cmd)\n        self.log('QUAST return code: ' + str(retcode))\n        if retcode:\n            # can't actually figure out how to test this. Give quast garbage it skips the file.\n            # Give quast a file with a missing sequence it acts completely normally.\n            raise ValueError('QUAST reported an error, return code was ' + str(retcode))\n        # quast will ignore bad files and keep going, which is a disaster for\n        # reproducibility and accuracy if you're not watching the logs like a hawk.\n        # for now, use this hack to check that all files were processed. Maybe there's a better way.\n        files_proc = len(open(_os.path.join(outdir, 'report.tsv'), 'r').readline().split('\\t')) - 1\n        files_exp = len(filepaths)\n        if files_proc != files_exp:\n            err = ('QUAST skipped some files - {} expected, {} processed.'\n                   .format(files_exp, files_proc))\n            self.log(err)\n\n.. External links\n\n.. |FastANI_link| raw:: html\n\n   <a href=\"https://github.com/kbaseapps/FastANI\" target=\"_blank\">FastANI  </a>\n\n.. |subprocess_link| raw:: html\n\n   <a href=\"https://docs.python.org/2/library/subprocess.html\" target=\"_blank\">subprocess  </a>\n\n.. |kb_quast_link| raw:: html\n\n   <a href=\"https://github.com/kbaseapps/kb_quast\" target=\"_blank\">kb_quast </a>\n\n.. Internal links\n\n.. |editApp_link| raw:: html\n\n   <a href=\"../howtos/edit_your_dockerfile.html\">How to edit your app\u2019s Dockerfile  </a>\n\n\n"}
{"text": "### Human: How do I update a KBase module to Python 3?### Assistant: Updating a module to Python3\n============================\nMany KBase modules are written in Python 2.7 which will reach the end of its service support in 2020. Beyond this date, Python 2 will cease to receive critical security updates. Fortunately, it's fairly easy to convert any single module to Python 3 as long as the module has a reasonably comprehensive set of unit tests. In addition to being secure for the future, these modules will access a host of performance and language features available in the 3.x releases.\n\n\nConverting the source code with 2to3\n------------------------------------\nThere are a number of compatibility tools available such as  |six|   or  |futurize|  which allow the execution of the same code by both Python 2 and Python 3 interpreters. Fortunately, KBase's module system means that preserving back compatibility with Python 2 is not necessary and we can use the built in |2to3| executable. You can update all the python files in the directory in one fell swoop with the command ``2to3 -w <path_to_your_module>`` but you should be aware that you might not always agree with these changes (see more in Caveats). Additionally, your Dockerfile will have to be updated to build ``FROM kbase/sdkbase2:python``. Once the Dockerfile is updated, all future test will be run in Python 3, allowing you to verify that the updated code is running correctly. Check over the code to make sure that none of the caveats in the next section apply.\n\nCaveats\n-------\n2to3 does a very good job catching most of the breaking changes between the python versions. However, there a few issues that are not caught by the library that may require some manual fixing:\n\n- ``Maketrans`` imports from ``str`` in Python3 not ``string``.\n- Strings in Python3 are by default unicode strings rather than byte strings. This solves many issues and inconsistencies but a few functions such as hashlib still expect byte strings. To produce these from a unicode string use the ``encode`` function like this: ``hashlib.md5(my_string.encode('utf-8')).hexdigest()``.\n- ``2to3`` will wrap functions like ``dict.keys()`` ``dict.items()`` or ``range()`` in a ``list`` declaration to preserve the original behavior of these functions as they now return generators. This is the safest option and may be preferred in some cases (for example if the values are to be printed) but the intent is to iterate over the values, (e.g., ``for key in list(my_dict.keys())``) it is more efficient to remove this list extra declaration and use the generator.\n- Some automatically generated files like ``baseclient.py`` and test files have fallback code for importing dependencies in 2 and 3 like this:\n\n    .. code-block:: python\n\n        try:\n            from configparser import ConfigParser as _ConfigParser  # py 3\n        except ImportError:\n            from ConfigParser import ConfigParser as _ConfigParser  # py 2\n\n``2to3`` will update the #py2 version to match the Python 3 syntax, so it's recommended to either revert this change or remove the try-except block\n\nResources\n---------\n\n* Neat new trick available in Python 3: |NeatNewTrick| \n* Check Python 3 readiness of common packages: |Readiness| \n\n\n.. External links\n.. _six: https://pythonhosted.org/six/\n.. _futurize: http://python-future.org/automatic_conversion.html\n.. _2to3: https://docs.python.org/2/library/2to3.htmlmended that you revert this change or simply use the\n\n.. |six| raw:: html\n\n   <a href=\"https://pythonhosted.org/six/\" target=\"_blank\">six</a>\n\n.. |futurize| raw:: html\n\n   <a href=\"http://python-future.org/automatic_conversion.html\" target=\"_blank\">futurize</a>\n\n.. |2to3| raw:: html\n\n   <a href=\"https://docs.python.org/2/library/2to3.html\" target=\"_blank\">2to3</a>\n\n.. |NeatNewTrick| raw:: html\n\n   <a href=\"http://whypy3.com/\" target=\"_blank\">http://whypy3.com/</a>\n\n\n.. |Readiness| raw:: html\n\n   <a href=\"http://py3readiness.org/\" target=\"_blank\">http://py3readiness.org/</a>\n\n\n"}
{"text": "### Human: How do I retrieve the workspace object from a KBase narrative?### Assistant: Working with reference data\n============================\n\nAdding Reference Data to a KBase App\n------------------------------------\n\n.. topic:: Motivation\n\n    Some tools and applications make use of large reference data\n    collections. For example, a QC app may have a reference data with common\n    contaminants. Adding data such as this to the git repo for the module\n    can make it very large. In addition, the generated Docker image would\n    also be very large. KBase App reference data is designed to address this\n    scenario.\n\n.. topic:: How Reference Data Works\n\n    To minimize the image size, this feature works by saving reference data\n    in a special volume space and then making that volume available through\n    a read-only mount in /data at app execution time. An init mode for the\n    module is run at registration time to initialize the reference data\n    volume. In addition, the reference data is separately versioned, so\n    code-only updates to a module can be made without having to\n    re-initialize the reference data.\n\nUsage\n-----\n\nTo make use of this feature, the app developer needs to do a few simple\nthings.\n\n1. Add the data-version tag to the kbase.yaml file and give it a\n   semantic version tag.\n2. Add any downloading and data preparation steps to the init section of\n   the entrypoint.sh script in the scripts directory. The init script\n   should place the data in /data and any apps that use the data should\n   be configured to look for the data in this location.\n3. Create a \\_\\_READY\\_\\_ file in /data to indicate that the reference\n   data volume was successfully created. Ideally, some sanity tests\n   should be performed to confirm things ran correctly by testing for\n   the presence of expected files. If the \\_\\_READY\\_\\_ file is not\n   present, the registration will fail, and the reference data area will\n   be removed.\n\nYou can see an example in the |RAST_link| \n\nUpdating Reference Data\n-----------------------\n\nIf a new version of reference data is required, the developer can\nincrease the version number for the reference data in kbase.yaml, make\nany updates to the init section, and re-register the app. This will\ntrigger the registration to initialize the reference data for the new\ndata version. Older versions of the app will continue to use the\nprevious reference data specified in that versions kbase.yaml file. This\nhelps to ensure reproducibility.\n\nGotchas\n-------\n\nThere a few things to watch out for with reference data:\n\n-  The reference data area (/data) is mounted during initialization\n   (module registration) and during app execution and replaces /data\n   from the Docker image. Any modifications made by the Dockerfile to\n   this space will not be visible. Changes must be done in the init\n   block in entrypoint.sh.\n-  The reference data is only writeable at registration time. This is to\n   ensure that the data is not accidentally changed during execution\n   which could break reproducibility. If the app requires the reference\n   data to be writeable when it executes, then you add code to the\n   execution that copies the data into the writeable work area prior to\n   running the underlying application.\n\n.. External links\n\n.. |RAST_link| raw:: html\n\n   <a href=\"https://github.com/kbaseapps/RAST_SDK/blob/a975436d9c0af4f772bd7235b467180860f64060/scripts/entrypoint.sh#L18-L28\" target=\"_blank\">RAST application  </a>\n\n"}
{"text": "### Human: How do I add reference data to a KBase app?### Assistant: Using Workspace Metadata\n==================================\n\n.. important::\n\n    While you can get objects using the workspace client, it is not the recommended way to do it. We suggest using the  |FileUtil_link| instead.\n    \nYou can download the Workspace client by running the following inside an SDK module: \n    \n    ``kb-sdk install https://raw.githubusercontent.com/kbase/workspace_deluxe/master/workspace.spec``\n    \n\nRetrieving workspace object metadata\n---------------------------------------\n\nIf you don't want to retrieve the entire object, and just want information about it, the most efficient way is to use the ``ws.get_object_info`` function. To read more about the available functions, see the  |Workspace_link|.\n\n*Initialize the workspace client and get an object's information by reference*\n\n.. code-block:: python\n\n    # The config object is passed into the __init__ function for your *Impl.py module\n    from Workspace.WorkspaceClient import Workspace as Workspace\n    self.ws_url = config[\"workspace-url\"]\n    self.token = config[\"KB_AUTH_TOKEN\"]\n    self.ws = Workspace(self.ws_url, token=self.token)\n    obj_ref = \"your/object/reference\"\n    object_info = self.ws.get_object_info([{\"ref\": obj_ref}])[0]\n    object_type = object_info[2] #this could be KBaseGenomes.Genome-8.3\n\n\nHow to use the Workspace Client in the narrative\n-------------------------------------------------\n\nYou can access the workspace client from within narrative code cells. See this `example narrative <https://narrative.kbase.us/narrative/ws.30170.obj.1>`_ |Example_link|.\n\n.. code-block:: python\n\n    ws = biokbase.narrative.clients.get('workspace')\n    obj = ws.get_objects2({'objects' : [{'ref' : '30170/2/1'}]})\n\n\n\nHow to add types to the workspace\n------------------------------------\n\n* See the guide at https://ci.kbase.us/services/ws/docs/administrationinterface.html#managing-module-ownership-requests |addTypes_link| \n* Use the administration interface in any of the clients above to register, approve registration of, and to upload typespecs\n\nHow to get a given typespec / .spec file?\n------------------------------------------\n\nIf you can't find a typespec in a repo, you can find it doing the following:\n\n.. code-block:: python\n\n    # Example spec file snippet\n\n    from biokbase.workspace.client import Workspace\n    ws = Workspace('https://ci.kbase.us/services/ws')\n    print(ws.get_module_info({'mod': 'YourModuleName'})['spec'])\n\n\n.. External links\n\n.. |Workspace_link| raw:: html\n\n   <a href=\"https://kbase.us/services/ws/docs/Workspace.html\" target=\"_blank\">workspace spec file </a>\n\n.. |Example_link| raw:: html\n\n   <a href=\"https://narrative.kbase.us/narrative/ws.30170.obj.1\" target=\"_blank\">example narrative  </a>\n\n.. |addTypes_link| raw:: html\n\n   <a href=\"https://ci.kbase.us/services/ws/docs/administrationinterface.html#managing-module-ownership-requests\" target=\"_blank\">https://ci.kbase.us/services/ws/docs/administrationinterface.html#managing-module-ownership-requests </a>\n\n\n.. Internal links\n\n.. |FileUtil_link| raw:: html\n\n   <a href=\"../howtos/file_utils.html\">file utilities </a>\n\n"}
